// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4388.Stronghold;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainLeftMaster;
    public static CANTalon driveTrainRightMaster;
    public static RobotDrive driveTrainTankDrive;
    public static CANTalon driveTrainLeftSlave;
    public static CANTalon driveTrainRightSlave;
    public static DoubleSolenoid shifterShiftSolenoid;
    public static CANTalon shooterShooterRight;
    public static CANTalon shooterShooterLeft;
    public static CANTalon shooterShooterBottom;
    public static CANTalon shooterPitch;
    public static CANTalon shooterYaw;
    public static CANTalon shooterElevation;
    public static CANTalon intakeRoller;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftMaster = new CANTalon(4);
        LiveWindow.addActuator("Drive Train", "Left Master", driveTrainLeftMaster);
        
        driveTrainRightMaster = new CANTalon(5);
        LiveWindow.addActuator("Drive Train", "Right Master", driveTrainRightMaster);
        
        driveTrainTankDrive = new RobotDrive(driveTrainLeftMaster, driveTrainRightMaster);
        
        driveTrainTankDrive.setSafetyEnabled(true);
        driveTrainTankDrive.setExpiration(0.1);
        driveTrainTankDrive.setSensitivity(0.5);
        driveTrainTankDrive.setMaxOutput(1.0);

        driveTrainLeftSlave = new CANTalon(3);
        LiveWindow.addActuator("Drive Train", "Left Slave", driveTrainLeftSlave);
        
        driveTrainRightSlave = new CANTalon(6);
        LiveWindow.addActuator("Drive Train", "Right Slave", driveTrainRightSlave);
        
        shifterShiftSolenoid = new DoubleSolenoid(2, 0, 1);
        LiveWindow.addActuator("Shifter", "Shift Solenoid", shifterShiftSolenoid);
        
        shooterShooterRight = new CANTalon(12);
        LiveWindow.addActuator("Shooter", "Shooter Right", shooterShooterRight);
        
        shooterShooterLeft = new CANTalon(11);
        LiveWindow.addActuator("Shooter", "Shooter Left", shooterShooterLeft);
        
        shooterShooterBottom = new CANTalon(10);
        LiveWindow.addActuator("Shooter", "Shooter Bottom", shooterShooterBottom);
        
        shooterPitch = new CANTalon(9);
        LiveWindow.addActuator("Shooter", "Pitch", shooterPitch);
        
        shooterYaw = new CANTalon(8);
        LiveWindow.addActuator("Shooter", "Yaw", shooterYaw);
        
        shooterElevation = new CANTalon(7);
        LiveWindow.addActuator("Shooter", "Elevation", shooterElevation);
        
        intakeRoller = new CANTalon(1);
        LiveWindow.addActuator("Intake", "Roller", intakeRoller);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftSlave.changeControlMode(TalonControlMode.Follower);
        driveTrainLeftSlave.set(driveTrainLeftMaster.getDeviceID());
        driveTrainRightSlave.changeControlMode(TalonControlMode.Follower);
        driveTrainRightSlave.set(driveTrainRightMaster.getDeviceID());
 }
}
